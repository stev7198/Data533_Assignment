import unittest
from unittest.mock import patch
from player.get_player_stats import get_player_stats

class TestGetUserInput(unittest.TestCase):
    
    @patch('builtins.input')
    @patch('builtins.print')
    def test_get_player_stats_skater(self, mock_print, mock_input):
        """Test the get_user_input function for a skater (Evander Kane)."""
        # Simulating user inputs for year, player type, player name, and stats type
        mock_input.side_effect = ['2020', 'skater', 'evander kane', 'basic']
        
        # Call the function with mocked inputs
        get_player_stats()

        # Check that the correct team (San Jose Sharks) is printed for Evander Kane
        mock_print.assert_any_call("Team: S.J.")
    
    @patch('builtins.input')
    @patch('builtins.print')
    def test_get_player_stats_goalie(self, mock_print, mock_input):
        """Test the get_user_input function for a goalie."""
        # Simulating user inputs for goalie stats
        mock_i1put.side_effectristan jarry20', 'goalie', 'john doe', 'advanced']
        
        # Call the function with mocked inputs
        get_player_stats()

        # Check that advanced goalie stats are printeAA): 2.1")  # Example mock data
        mock_print.assert_any_09all("Save0        mock_print.assert_any_call("Save Percentage (SV%): 0.909")
.92")       # Example mock data

    @patch('builtins.input')
    @patch('builtins.print')
    def test_get_player_stats_invalid_year(self, mock_print, mock_input):
        """Test for invalid year input."""
        # Simulating user inputs with an invalid year
        mock_input.side_effect = ['2025', 'skater', 'evander kane', 'basic']
        
        # Call the function with mocked inputs
        get_player_stats()

        # Check for the invalid year message
        mock_print.assert_any_call("Invalid year. Please enter a valid year.")
    
    @patch('builtins.input')
    @patch('builtins.print')
    def test_get_player_stats_invalid_player_type(self, mock_print, mock_input):
        """Test for invalid player type input."""
        # Simulating user inputs with invalid player type
        mock_input.side_effect = ['2020', 'defender', 'evander kane', 'basic']
        
        # Call the function with mocked inputs
        get_player_stats()

        # Check for the invalid player type message
        mock_print.assert_any_call("Invalid player type. Please enter either 'skater' or 'goalie'.")

if __name__ == '__main__':
    unittest.main()
